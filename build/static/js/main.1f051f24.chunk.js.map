{"version":3,"sources":["InputField.js","Button.js","Application.js","serviceWorker.js","index.js"],"names":["InputField","readOnly","type","name","this","props","id","className","col","value","Component","Button","number","cols","onClick","action","symbol","Application","addToCurrent","state","nextIsRestet","setState","equation","convertedEquation","length","isNaN","indexOf","reset","backspace","console","log","slice","pop","infixToRpn","operatorStack","outputStack","operatorsArray","operators","priority","associavity","token","push","o1","o2","solveEquation","stack","forEach","item","replace","second","parseFloat","first","Math","pow","isEquationRight","isOk","index","equals","buttons","equationString","convertedEquationString","map","btn","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f051f24.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass InputField extends Component {\n\n    render() {\n        return (\n            <input readOnly type=\"text\" name={this.props.name} id={this.props.id} className={`calculator__input col-${this.props.col}`}  value={this.props.value}/>\n        )\n    }\n}\nexport default InputField;","import React, { Component } from 'react';\n\nclass Button extends Component {\n\n    \n\n    render() {\n        return (\n            (this.props.number)\n                ?\n                <button className={`calculator__button  calculator__button--number col-${this.props.cols}`} onClick={() => this.props.action(this.props.symbol)}>{this.props.symbol}</button>\n                :\n                <button className={`calculator__button  col-${this.props.cols}`} onClick={() => this.props.action(this.props.symbol)}>{this.props.symbol}</button>\n            \n            )\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport InputField from './InputField';\nimport Button from './Button';\nimport './style.css';\n\nclass Application extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            equation: ['0'],\n            nextIsRestet: false,\n            convertedEquation: []\n\n        }\n        \n    }\n    addToCurrent = (symbol) => {\n        if(this.state.nextIsRestet) {\n            this.setState({\n                equation: ['0'],\n                nextIsRestet: false,\n                convertedEquation: []\n            })\n        } else {\n            if(this.state.equation.length === 1 && this.state.equation[this.state.equation.length - 1] === '0') {\n                let {equation} = this.state;\n                equation[0] = symbol;\n                this.setState({equation: equation});\n            } else {\n                if(!isNaN(this.state.equation[this.state.equation.length - 1]) && ['+', '-', '*', '/', '^', '(', ')'].indexOf(symbol) === -1) {\n                    let {equation} = this.state;\n                    equation[equation.length - 1] = equation[equation.length - 1] + symbol;\n                    this.setState({equation: equation});\n                } else {\n                    let {equation} = this.state;\n                    equation = [...equation, symbol];\n                    this.setState({equation: equation});\n                }\n            }\n        }\n    }\n\n    reset = () => {\n        let {equation, nextIsRestet, convertedEquation} = this.state;\n        equation = ['0'];\n        nextIsRestet =  false;\n        convertedEquation = [];\n        this.setState(\n            {\n                equation,\n                nextIsRestet,\n                convertedEquation\n            }\n            );\n    }\n\n    backspace = () => {\n        let {equation} = this.state;\n        if(this.state.equation.length <= 1) {\n            if(equation[equation.length - 1].length === 1) {\n                console.log(\"1\")\n                equation = ['0'];\n                this.setState({equation});\n            } else {\n                console.log(\"2\")\n                equation[equation.length - 1] = equation[equation.length - 1].slice(0,-1);\n                this.setState({equation});\n            }\n            \n        } else {\n            if(equation[equation.length - 1].length === 1) {\n                equation.pop();\n                this.setState({equation});\n            } else {\n                console.log(\"2\")\n                equation[equation.length - 1] = equation[equation.length - 1].slice(0,-1);\n                this.setState({equation});\n            }\n        }\n    }\n    infixToRpn = (equation) => {\n        let operatorStack = [];\n        let outputStack = [];\n        let operatorsArray = ['+', '-', '*', '/', '^'];\n        const operators = {\n            '^' : {\n                priority: 4,\n                associavity: 'right'\n            },\n            '*' : {\n                priority: 3,\n                associavity: 'left'\n            },\n            '/' : {\n                priority: 3,\n                associavity: 'left'\n            },\n            '-' : {\n                priority: 2,\n                associavity: 'left'\n            },\n            '+' : {\n                priority: 2,\n                associavity: 'left'\n            }\n        }\n\n        // eslint-disable-next-line\n        for(const token of equation) {\n\n            \n            if((!isNaN(token) || token === '.') && token !== ' ') {\n                outputStack.push(token);\n            } else if (operatorsArray.indexOf(token) !== -1 && operatorStack.length === 0) {\n                operatorStack.push(token);\n            \n            } else if (operatorsArray.indexOf(token) !== -1 && operatorStack.length > 0) {\n                let o1 = token;\n                \n               \n                let o2 = operatorStack[operatorStack.length - 1];\n\n                while(\n                    operatorStack.length > 0 &&\n                    operatorsArray.indexOf(o2) !== -1 &&\n                    (\n                        (\n                            operators[o1].associavity === 'left' &&\n                            operators[o1].priority <= operators[o2].priority\n                        ) ||\n                        (\n                            operators[o1].associavity === 'right' &&\n                            operators[o1].priority < operators[o2].priority\n                        )\n                    ) \n\n                ) {\n                    outputStack.push(operatorStack.pop());\n                    o2 = operatorStack[operatorStack.length - 1];\n                }\n            \n                operatorStack.push(o1);\n            } else if(token === '(') {\n                operatorStack.push(token)\n            } else if (token === ')') {\n                 while(operatorStack[operatorStack.length - 1] !== '(') {\n                    outputStack.push(operatorStack.pop());\n                    console.log(operatorStack)\n                } \n                operatorStack.pop();\n                console.log(operatorStack)\n            }\n        \n        }\n        while(operatorStack.length > 0) {\n            outputStack.push(operatorStack.pop());\n        }\n        return outputStack;\n    }\n\n    solveEquation = (equation) => {\n        let stack = [];\n        equation.forEach((item) => {\n            \n            item = item.replace(/\\s+/g, '');\n            if(item !== ' ') {\n            if(!isNaN(item)) {\n                stack.push(item);\n            } else {\n                let second = parseFloat(stack.pop());\n                let first = parseFloat(stack.pop());\n                if(item === '+') {\n                    stack.push(first + second);\n                } else if(item === '-') {\n                    stack.push(first - second);\n                } else if(item === \"*\") {\n                    stack.push(first*second);\n                } else if(item === \"/\") {\n                    stack.push(first / second);\n                } else if(item === \"^\") {\n                    stack.push(Math.pow(first,second));\n                }\n            }\n        }\n        })\n\n        return stack;\n    }\n\n    isEquationRight = (equation) => {\n        let isOk = true;\n        let operators = ['+', '-', '/', '*', '^', '.'];\n        if(equation.length < 3) {\n            isOk = false;\n        }\n        equation.forEach((item, index) => {\n            if(item === '(') {\n                if(equation[index + 1] === ')') {\n                    isOk = false;\n                }\n            } else if (item === ')') {\n                if(equation[index + 1] === '(') {\n                    isOk = false;\n                }\n            } else if(operators.indexOf(item) !== -1) {\n                if(operators.indexOf(equation[index + 1]) !== -1) {\n                    isOk = false;\n                }\n            }\n\n        })\n\n        return isOk;\n    }\n\n    equals = () => {\n        let {equation, convertedEquation} = this.state;\n        /*\n        two parans (\\)\\()+\n        two or more operators [\\.\\-\\*\\+\\/]*[\\.\\-\\*\\+\\/]\n        */\n        \n        if(this.isEquationRight(equation)) {\n            convertedEquation = this.infixToRpn(equation);\n            equation = this.solveEquation(convertedEquation);\n            this.setState({convertedEquation})\n            this.setState({equation, nextIsRestet: true})\n        } else {\n            this.setState({convertedEquation: ['Your equation is wrong']})\n        }\n    }\n    render () {\n\n        const buttons = [\n            {symbol: 'C', cols: 2, action: this.reset},\n            {symbol: '\\u2B70', cols: 2, action: this.backspace},\n            {symbol: \"(\", cols: 1, action: this.addToCurrent},\n            {symbol: \")\", cols: 1, action: this.addToCurrent},\n            {symbol: \"^\", cols: 1, action: this.addToCurrent},\n            {symbol: \"*\", cols: 1, action: this.addToCurrent},\n            {symbol: \"7\", cols: 1, action: this.addToCurrent},\n            {symbol: \"8\", cols: 1, action: this.addToCurrent},\n            {symbol: \"9\", cols: 1, action: this.addToCurrent},\n            {symbol: \"/\", cols: 1, action: this.addToCurrent},\n            {symbol: \"4\", cols: 1, action: this.addToCurrent},\n            {symbol: \"5\", cols: 1, action: this.addToCurrent},\n            {symbol: \"6\", cols: 1, action: this.addToCurrent},\n            {symbol: \"-\", cols: 1, action: this.addToCurrent},\n            {symbol: \"1\", cols: 1, action: this.addToCurrent},\n            {symbol: \"2\", cols: 1, action: this.addToCurrent},\n            {symbol: \"3\", cols: 1, action: this.addToCurrent},\n            {symbol: \"+\", cols: 1, action: this.addToCurrent},\n            {symbol: \".\", cols: 1, action: this.addToCurrent},\n            {symbol: \"0\", cols: 1, action: this.addToCurrent},\n            {symbol: \"=\", cols: 2, action: this.equals},\n\n        ];\n        let equationString = '';\n        let convertedEquationString = '';\n\n        this.state.equation.forEach((item) => {\n            equationString += item + ' ';\n        })\n\n        this.state.convertedEquation.forEach((item) => {\n            convertedEquationString += item + ' ';\n        });\n        \n        return (\n            <div className=\"calculator\">\n                <InputField name=\"converted-quation\" id=\"convertedEquation\" value={convertedEquationString} col=\"4\"/>\n                <InputField name=\"original-equation\" id=\"originalEquation\" value={equationString} col=\"4\"/>\n                {buttons.map((btn, i) => {\n                    return <Button key={i} symbol={btn.symbol} cols={btn.cols} action={(symbol) => btn.action(symbol) } number={!isNaN(btn.symbol)}/>\n                })}\n            </div>\n        )\n    }\n}\nexport default Application;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './Application';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}